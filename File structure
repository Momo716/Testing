```python
import pandas as pd
import numpy as np
from datetime import datetime
import os
import openpyxl
from openpyxl.utils import get_column_letter

def extract_call_volumes(file_path):
    """
    Extract call volume data from the call volume file.
    Now specifically targets the three age groups in rows 53, 54, and 55.
    
    Args:
        file_path: Path to the call volume Excel file
    
    Returns:
        Tuple of (call_volumes_18_64, sum_calls_except_18_64)
    """
    print(f"Reading call volume file: {file_path}")
    
    try:
        # Read the Excel file
        workbook = openpyxl.load_workbook(file_path, data_only=True)
        sheet = workbook["Rpt-Vol (daily-quotidien)"]
        
        # Initialize variables
        call_volumes_18_64 = 0  
        sum_calls_except_18_64 = None
        age_groups_data = []
        
        # Define the specific rows containing the 18-64 age groups
        # Based on the image, these are rows 53, 54, and 55 
        # The column with values appears to be column AA (or 27 in 0-based index)
        age_group_rows = [53, 54, 55]
        value_column = 27  # Column AA (adjust if needed for your file)
        
        # Extract values from the specific age group rows
        for row in age_group_rows:
            cell_value = sheet.cell(row=row, column=value_column).value
            label = sheet.cell(row=row, column=3).value  # Column C with description (adjust if needed)
            
            if cell_value is not None:
                # Convert to float if it's a string with commas
                if isinstance(cell_value, str):
                    cell_value = float(cell_value.replace(',', ''))
                
                if isinstance(cell_value, (int, float)) and cell_value > 0:
                    call_volumes_18_64 += cell_value
                    age_groups_data.append((label, cell_value))
        
        # Print the found age groups and their values
        print(f"Found age groups for 18-64:")
        for label, value in age_groups_data:
            print(f"  - {label}: {value}")
        print(f"Total call volumes for 18-64: {call_volumes_18_64}")
        
        # Find the sum of calls for all age groups except 18-64
        # This is typically a pre-calculated value somewhere in the sheet
        # Common pattern to search for this value
        sum_found = False
        for row in range(1, sheet.max_row + 1):
            row_text = ""
            for col in range(1, 10):  # Check first 10 columns
                cell_value = sheet.cell(row=row, column=col).value
                if cell_value:
                    row_text += str(cell_value) + " "
            
            # Look for a row that mentions sum of calls except 18-64
            if "sum of calls" in row_text.lower() and "except 18-64" in row_text.lower():
                for col in range(1, sheet.max_column + 1):
                    cell_value = sheet.cell(row=row, column=col).value
                    if isinstance(cell_value, (int, float)) and cell_value > 0:
                        sum_calls_except_18_64 = cell_value
                        sum_found = True
                        print(f"Found sum of calls except 18-64: {sum_calls_except_18_64}")
                        break
                if sum_found:
                    break
        
        # If we couldn't find the pre-calculated sum, provide a warning
        if not sum_found:
            print("WARNING: Could not find pre-calculated sum of calls except 18-64")
        
        return call_volumes_18_64, sum_calls_except_18_64
        
    except Exception as e:
        print(f"Error extracting call volumes: {str(e)}")
        return None, None

def extract_application_volumes(file_path):
    """
    Extract application volume data from the applications volume file.
    This file already contains only 18-64 data.
    
    Args:
        file_path: Path to the applications volume Excel file
    
    Returns:
        Tuple of (applications_18_64_new, applications_18_64_renewals)
    """
    print(f"Reading applications volume file: {file_path}")
    
    try:
        # Read the Excel file
        df = pd.read_excel(file_path, sheet_name="Sheet1")
        
        # Looking at image 4, we need to find the columns for Receive and Type
        # First, try to find columns by exact name
        receive_col = None
        type_col = None
        
        for col in df.columns:
            if isinstance(col, str):
                if col.lower() == "receive":
                    receive_col = col
                elif col.lower() == "type":
                    type_col = col
        
        # If not found by exact name, try more flexible matching
        if receive_col is None:
            for col in df.columns:
                if isinstance(col, str) and "receive" in col.lower():
                    receive_col = col
                    break
            # If still not found, assume it's column B (index 1) based on image 4
            if receive_col is None and len(df.columns) > 1:
                receive_col = df.columns[1]
        
        if type_col is None:
            for col in df.columns:
                if isinstance(col, str) and "type" in col.lower():
                    type_col = col
                    break
            # If still not found, assume it's column E (index 4) based on image 4
            if type_col is None and len(df.columns) > 4:
                type_col = df.columns[4]
        
        print(f"Using column '{receive_col}' for Receive and column '{type_col}' for Type")
        
        # Sum applications for age group 18-64 (New Applications)
        # This file already only contains 18-64 data, so we just filter by type
        new_apps_df = df[df[type_col].astype(str).str.contains("New Applications", case=False, na=False)]
        applications_18_64_new = new_apps_df[receive_col].sum()
        
        # Sum applications specifically for renewals
        renewals_df = df[df[type_col].astype(str).str.contains("Renewals", case=False, na=False)]
        applications_18_64_renewals = renewals_df[receive_col].sum()
        
        print(f"Applications for 18-64 (New Applications): {applications_18_64_new}")
        print(f"Applications for 18-64 (Renewals): {applications_18_64_renewals}")
        
        return applications_18_64_new, applications_18_64_renewals
        
    except Exception as e:
        print(f"Error extracting application volumes: {str(e)}")
        return None, None

def calculate_calling_rates(call_volumes_18_64, sum_calls_except_18_64, applications_18_64_new, applications_18_64_renewals):
    """
    Calculate the calling rates based on the extracted data.
    
    Args:
        call_volumes_18_64: Call volumes for age group 18-64 (summed from three age groups)
        sum_calls_except_18_64: Sum of calls for all age groups except 18-64
        applications_18_64_new: Applications for age group 18-64 (New Applications)
        applications_18_64_renewals: Applications for age group 18-64 (Renewals)
    
    Returns:
        Tuple of (calling_rate_new, calling_rate_renewals)
    """
    try:
        # Calculate calling rate for new applications
        calling_rate_new = call_volumes_18_64 / applications_18_64_new if applications_18_64_new != 0 else 0
        
        # Calculate calling rate for renewals
        calling_rate_renewals = sum_calls_except_18_64 / applications_18_64_renewals if applications_18_64_renewals != 0 else 0
        
        print(f"Calculated calling rates:")
        print(f"Calling Rate for New Applications (18-64): {calling_rate_new:.4f}")
        print(f"Calling Rate for Renewals: {calling_rate_renewals:.4f}")
        
        return calling_rate_new, calling_rate_renewals
        
    except Exception as e:
        print(f"Error calculating calling rates: {str(e)}")
        return None, None

def update_output_file(output_path, calling_rate_new, calling_rate_renewals):
    """
    Update the output Excel file with the new calling rates.
    
    Args:
        output_path: Path to the output Excel file
        calling_rate_new: Calling rate for new applications
        calling_rate_renewals: Calling rate for renewals
    
    Returns:
        Boolean indicating success or failure
    """
    try:
        # Get current date
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        # Create data for the new row
        new_data = {
            "Date": current_date,
            "Calling Rate New Applications": calling_rate_new,
            "Calling Rate Renewals": calling_rate_renewals
        }
        
        # Check if the file exists
        if os.path.exists(output_path):
            print(f"Output file exists, appending new data: {output_path}")
            
            # Read the existing file
            df = pd.read_excel(output_path)
            
            # Check if today's date already exists
            if current_date in df["Date"].astype(str).values:
                print(f"Data for {current_date} already exists, updating...")
                df.loc[df["Date"].astype(str) == current_date, "Calling Rate New Applications"] = calling_rate_new
                df.loc[df["Date"].astype(str) == current_date, "Calling Rate Renewals"] = calling_rate_renewals
            else:
                print(f"Adding new row for {current_date}...")
                df = pd.concat([df, pd.DataFrame([new_data])], ignore_index=True)
        else:
            print(f"Output file does not exist, creating new file: {output_path}")
            df = pd.DataFrame([new_data])
        
        # Save the DataFrame to Excel
        df.to_excel(output_path, index=False)
        
        print(f"Output file updated successfully: {output_path}")
        return True
        
    except Exception as e:
        print(f"Error updating output file: {str(e)}")
        return False

def main():
    """Main function to run the daily calling rate calculation."""
    # File paths - UPDATE THESE WITH YOUR ACTUAL PATHS
    call_volume_path = "path/to/call_volume_file.xlsx"
    applications_volume_path = "path/to/applications_volume_file.xlsx"
    output_path = "path/to/output_file.xlsx"
    
    print(f"Starting daily calling rate calculation...")
    
    # Extract data from input files
    call_volumes_18_64, sum_calls_except_18_64 = extract_call_volumes(call_volume_path)
    
    if call_volumes_18_64 is None or sum_calls_except_18_64 is None:
        print("ERROR: Failed to extract call volume data. Please check the file structure.")
        return
    
    # Extract application volumes - this file already only contains 18-64 data
    applications_18_64_new, applications_18_64_renewals = extract_application_volumes(applications_volume_path)
    
    if applications_18_64_new is None or applications_18_64_renewals is None:
        print("ERROR: Failed to extract application volume data. Please check the file structure.")
        return
    
    # Calculate calling rates
    calling_rate_new, calling_rate_renewals = calculate_calling_rates(
        call_volumes_18_64, sum_calls_except_18_64, applications_18_64_new, applications_18_64_renewals
    )
    
    if calling_rate_new is None or calling_rate_renewals is None:
        print("ERROR: Failed to calculate calling rates.")
        return
    
    # Update the output file
    success = update_output_file(output_path, calling_rate_new, calling_rate_renewals)
    
    if success:
        print("\n✅ SUCCESS: Daily calling rates have been calculated and saved.")
        print("    - New Applications Rate: Call Volumes for 18-64 age groups (sum of rows 53, 54, 55)")
        print("                            divided by Applications for 18-64 (New Applications)")
        print("    - Renewals Rate: Sum of calls except 18-64")
        print("                    divided by Applications for 18-64 (Renewals)")
    else:
        print("\n❌ ERROR: Failed to update the output file.")

if __name__ == "__main__":
    main()
```
